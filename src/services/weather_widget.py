"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–≥–æ–¥–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
"""
from datetime import datetime, timedelta

from open_weather_map.models import OneCall

TIME_FORMAT = '%H:%M'
DATE_FORMAT = '%m.%d.%Y'


class WeatherWidget:

    def __init__(self, weather: OneCall, widget_config: dict):
        """
        –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
        :param weather: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ
        :param widget_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞
        """
        self.weather = weather
        self.config = widget_config

    def as_text(self) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏
        :return: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
        """
        current_weather = self.weather.current
        offset = self.weather.timezone_offset
        current_datetime = local_time_to_global(current_weather.dt, offset)
        today_weather = self.weather.daily[0]

        msg_parts = [
            f'–ü–û–ì–û–î–ê –ù–ê –°–ï–ì–û–î–ù–Ø <b>({current_datetime.strftime(DATE_FORMAT)})</b>',
            f'üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {r_temp(current_weather.temp)} ({current_weather.weather[0].description})',
            f'üå° –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {r_temp(current_weather.feels_like)}',
            f'üí® –í–µ—Ç–µ—Ä {current_weather.wind_speed} –º/c',
            f'üåÖ –í–æ—Å—Ö–æ–¥: {local_time_to_global(current_weather.sunrise, offset).strftime(TIME_FORMAT)}',
            f'üåÜ –ó–∞–∫–∞—Ç: {local_time_to_global(current_weather.sunset, offset).strftime(TIME_FORMAT)}',
            f'',
            f'üå° –£—Ç—Ä–æ <b>{r_temp(today_weather.temp.morn)}</b> '
            f'(–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {r_temp(today_weather.feels_like.morn)})',
            f'üå° –î–µ–Ω—å <b>{r_temp(today_weather.temp.day)}</b> '
            f'(–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {r_temp(today_weather.feels_like.day)})',
            f'üå° –í–µ—á–µ—Ä <b>{r_temp(today_weather.temp.eve)}</b> '
            f'(–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {r_temp(today_weather.feels_like.eve)})',
            f'üå° –ù–æ—á—å <b>{r_temp(today_weather.temp.night)}</b> '
            f'(–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {r_temp(today_weather.feels_like.night)})',
            f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {r_temp(today_weather.temp.max)}',
            f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {r_temp(today_weather.temp.min)}',
        ]

        return '\n'.join(msg_parts)


def local_time_to_global(
        timestamp: int,
        timezone_offset: int,
) -> datetime:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ
    :param timestamp: –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞
    :param timezone_offset: –í—Ä–µ–º–µ–Ω–Ω–æ–π —Å–¥–≤–∏–≥
    :return:
    """

    timestamp_datetime = datetime.utcfromtimestamp(timestamp)
    local_timestamp_datetime = timestamp_datetime + timedelta(seconds=timezone_offset)
    return local_timestamp_datetime


def r_temp(
        temp: float
) -> float:
    """
    –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    :param temp: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    :return:
    """
    return round(temp, 1)
